{"name":"High-Performance Computing using Campus Cluster","tagline":"","body":"## Introduction to HPC\r\n### Who this is for:\r\nThis seminar is intended for students with prior programming experience (i.e., who are comfortable with basic idioms like for statements and compiling and linking code) but who aren't certain where to begin using a cluster.  We will attempt to give you the lay of the land of HPC:  the basic conventions, architectural assumptions, and computer science background necessary to follow a high-level discussion on supercomputing.\r\n\r\n### Who this is not for:\r\nIf you have been working comfortably on clusters in the past, you are probably already familiar with most of the terminology, conventions, and utilities which we will discuss.\r\n\r\nIf you have very little programming experience, you should focus on mastering serial programming in the language of your choice before parallelism complicates things.  (If you are interested in scientific programming and don't have a reason to choose one language over another, Python is an excellent place to start; C, C++, and Fortran are strong alternatives, particularly if you need parallelism.)  If you are not comfortable in Linux and the command line, you may consider the CSE Training workshop on the Linux command line, also offered in Spring 2014.\r\n\r\n## Agenda\r\n*Day 1*\r\n- Campus Cluster background\r\n- Logging in and first look\r\n- Shells & architecture, environment\r\n- What is HPC?\r\n  - Strategies:  vectorization, distributed computing, local threading\r\n  - Architecture\r\n  - Performance\r\n- Running code on a cluster\r\n  - Queueing\r\n  - Campus Cluster operations model\r\n  - `mpiexec`\r\n\r\n*Day 2*\r\n- Scientific Coding and HPC\r\n  - Compiling & building (`gcc`, `make`)\r\n  - Examples:  OpenMP, MPI, GNU SSL, Intel MKL\r\n  - Code organization & data management best practices\r\n  - Responsible cluster use\r\n  - Language support and libraries for HPC\r\n  - Debugging (`gdb`, `valgrind`, numerical error)\r\n  - Numerical error (workbook as [IPython notebook](https://raw.github.com/uiuc-cse/hpc-sp14/master/numerical-error.ipynb) Â· [HTML file](http://nbviewer.ipython.org/github/uiuc-cse/hpc-sp14/blob/master/numerical-error.ipynb))\r\n    - Machine representation\r\n    - Truncation error and modified equations\r\n- Setting up Campus Cluster to be friendlier\r\n\r\n## HPC and Campus Cluster Links\r\n[Beginner's Guide to Campus Cluster](https://campuscluster.illinois.edu/user_info/doc/beginner.html)\r\n\r\n[User's Guide to Campus Cluster](https://campuscluster.illinois.edu/user_info/doc/index.html)\r\n\r\n[Guide to Installing Software](https://campuscluster.illinois.edu/user_info/draft/software_install.guidelines.html)\r\n\r\n[HPC University Training Roadmap](http://hpcuniversity.org/roadmap/)\r\n\r\n[UCAR SEA Best Practices for HPC](https://sea.ucar.edu/best-practices/practices/)\r\n\r\n| _Courses at UIUC_ | |\r\n| --- | --- |\r\n| ECE 408/CS 483\t\t| Applied Parallel Programming| \r\n| ECE 492/CS 420/CSE 402\t| Introduction to Parallel Programming for Scientists and Engineers| \r\n| ECE 428/CS 425/CSE 424\t| Distributed Systems| \r\n| CS 524\t\t\t| Concurrent Programming Languages| \r\n| CS 525\t\t\t| Advanced Topics in Distributed Systems| \r\n| CS 533\t\t\t| Parallel Computer Architectures| \r\n| CS 554/CSE 512\t\t| Parallel Numerical Algorithms| \r\n| ECE 598HK/CS 598HK\t| Computational Thinking for Many-Core Computing| ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}